name: Deploy Full Stack to AWS

on:
  push:
    branches:
      - develop
    tags:
      - 'v*'
  workflow_dispatch:

env:
  # Use the correct lowercase AWS region identifier.
  AWS_REGION: il-central-1
  NODE_VERSION: '20'
  # Stage name is used by several deployment scripts (defaults to "dev" if omitted).
  STAGE: ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'dev' }}

jobs:
  deploy:
    name: Deploy Full Stack
    runs-on: ubuntu-latest
    # Run for develop pushes, tag creation (master releases), or manual trigger
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npx nx build backend --configuration=${{ env.STAGE == 'production' && 'production' || 'development' }}

      - name: Build frontend
        run: npx nx build frontend --configuration=${{ env.STAGE == 'production' && 'production' || 'development' }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment configuration
        run: node scripts/prepare-deployment.js

      - name: Create DynamoDB tables
        run: node scripts/create-dynamodb-tables.js

      - name: Create Lambda deployment packages
        run: node scripts/create-lambda-packages.js

      - name: Deploy Lambda functions
        run: node scripts/deploy-lambdas.js

      - name: Deploy API Gateway
        id: deploy-api-gateway
        run: |
          echo "üöÄ Deploying API Gateway for stage: ${{ env.STAGE }}"
          
          # First attempt: Normal deployment
          if node scripts/deploy-api-gateway.js; then
            echo "‚úÖ API Gateway deployed successfully"
            exit 0
          fi
          
          # If first attempt fails, check if it's a resource conflict
          echo "‚ö†Ô∏è First API Gateway deployment failed, analyzing error..."
          
          # Wait a moment for AWS to stabilize
          sleep 10
          
          # Second attempt: Use RECREATE_API to clean up conflicts
          echo "üîÑ Retrying with RECREATE_API=true to resolve conflicts..."
          if RECREATE_API=true node scripts/deploy-api-gateway.js; then
            echo "‚úÖ API Gateway deployed successfully after recreation"
            exit 0
          fi
          
          # If both attempts fail, exit with error
          echo "‚ùå API Gateway deployment failed after two attempts"
          echo "üîß Manual intervention may be required"
          exit 1

      - name: Deploy Frontend to S3 (Fast - first attempt)
        id: deploy-frontend-fast
        run: node scripts/deploy-frontend-fast.js
        continue-on-error: true

      - name: Deploy Frontend to S3 (Full setup on fast failure)
        if: steps.deploy-frontend-fast.outcome == 'failure'
        run: |
          echo "Fast frontend deployment failed. Deploying with full infrastructure setup..."
          node scripts/deploy-frontend.js

      - name: Create CloudFront Distribution (if needed)
        if: steps.deploy-frontend-fast.outcome == 'failure'
        run: node scripts/setup-cloudfront.js

      - name: Setup Frontend Custom Domain
        run: node scripts/setup-frontend-custom-domain.js
        continue-on-error: true

      - name: Output URLs
        run: |
          echo "API deployed to: $(cat deployment-info.json | jq -r '.api.apiUrl')"
          echo "Frontend deployed to: $(cat deployment-info.json | jq -r '.frontend.cloudfrontUrl')"
          echo "Custom domain: https://$(cat deployment-info.json | jq -r 'if .customDomains then (.customDomains | keys | map(select(test("api") | not)))[0] else "not-configured" end')" 